# 13ms, beat 44.84%
class Solution {
public:
// Solution #1: dictionary + list
    vector<int> twoSum(vector<int>& nums, int target) {
        // vector here like the list in python
        vector <int> result;
        // map like the dict in python
        unordered_map <int, int> hash;
        // going over the entire nums:
        for (int i = 0; i < nums.size(); i ++){
            if (hash.find(nums[i]) != hash.end()) {
                result.push_back (hash[nums[i]]);
                result.push_back (i);
                return result;
            }
            hash[target - nums[i]] = i;
        }
        
    }
};  

# 229ms, 9.89%;
// Solution #2: 遍历:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector <int> result;
        for (int i = 0;  i < nums.size(); i ++){
            for (int j = i + 1; j < nums.size(); j ++){
                if (nums[i] + nums[j] == target) {
                    result.push_back (i);
                    result.push_back (j);
                    return result;
                }
            }
        }
    }
};  

// Solution #3: Two pointer solution: needed to sort first. 但是发现sort之后的角标变得非常的难找。所以先post一个直接给value的：角标的见http://fisherlei.blogspot.com/2013/03/leetcode-two-sum-solution.html
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector <int> result;
        sort (nums.begin(), nums.end());
        int left = 0;
        int right = nums.size() - 1;
        while (left < right) {
            int sums = nums[left] + nums[right];
            if ( sums < target)
                left ++;
            else if (sums > target)
                right --;
            else
                result.push_back (nums[left]);
                result.push_back (nums[right]);
                return result;
        }
    }
};  
